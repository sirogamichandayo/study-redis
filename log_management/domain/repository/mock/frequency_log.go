// Code generated by MockGen. DO NOT EDIT.
// Source: frequency_log.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	domain "log_management/domain"
	model "log_management/domain/repository/model"
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockFrequencyLogInterface is a mock of FrequencyLogInterface interface.
type MockFrequencyLogInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFrequencyLogInterfaceMockRecorder
}

// MockFrequencyLogInterfaceMockRecorder is the mock recorder for MockFrequencyLogInterface.
type MockFrequencyLogInterfaceMockRecorder struct {
	mock *MockFrequencyLogInterface
}

// NewMockFrequencyLogInterface creates a new mock instance.
func NewMockFrequencyLogInterface(ctrl *gomock.Controller) *MockFrequencyLogInterface {
	mock := &MockFrequencyLogInterface{ctrl: ctrl}
	mock.recorder = &MockFrequencyLogInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFrequencyLogInterface) EXPECT() *MockFrequencyLogInterfaceMockRecorder {
	return m.recorder
}

// ArchiveCount mocks base method.
func (m *MockFrequencyLogInterface) ArchiveCount(ctx context.Context, cmd redis.Cmdable, name string, level *domain.LogLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveCount", ctx, cmd, name, level)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveCount indicates an expected call of ArchiveCount.
func (mr *MockFrequencyLogInterfaceMockRecorder) ArchiveCount(ctx, cmd, name, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveCount", reflect.TypeOf((*MockFrequencyLogInterface)(nil).ArchiveCount), ctx, cmd, name, level)
}

// ArchiveUpdatedAt mocks base method.
func (m *MockFrequencyLogInterface) ArchiveUpdatedAt(ctx context.Context, cmd redis.Cmdable, name string, level *domain.LogLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveUpdatedAt", ctx, cmd, name, level)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveUpdatedAt indicates an expected call of ArchiveUpdatedAt.
func (mr *MockFrequencyLogInterfaceMockRecorder) ArchiveUpdatedAt(ctx, cmd, name, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveUpdatedAt", reflect.TypeOf((*MockFrequencyLogInterface)(nil).ArchiveUpdatedAt), ctx, cmd, name, level)
}

// GetCountsByRank mocks base method.
func (m *MockFrequencyLogInterface) GetCountsByRank(ctx context.Context, cmd redis.Cmdable, name string, level *domain.LogLevel, op *model.RankOption) ([]*model.LogMessageCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountsByRank", ctx, cmd, name, level, op)
	ret0, _ := ret[0].([]*model.LogMessageCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountsByRank indicates an expected call of GetCountsByRank.
func (mr *MockFrequencyLogInterfaceMockRecorder) GetCountsByRank(ctx, cmd, name, level, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountsByRank", reflect.TypeOf((*MockFrequencyLogInterface)(nil).GetCountsByRank), ctx, cmd, name, level, op)
}

// GetUpdatedAt mocks base method.
func (m *MockFrequencyLogInterface) GetUpdatedAt(ctx context.Context, cmd redis.Cmdable, name string, level *domain.LogLevel) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAt", ctx, cmd, name, level)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatedAt indicates an expected call of GetUpdatedAt.
func (mr *MockFrequencyLogInterfaceMockRecorder) GetUpdatedAt(ctx, cmd, name, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAt", reflect.TypeOf((*MockFrequencyLogInterface)(nil).GetUpdatedAt), ctx, cmd, name, level)
}

// IncrCount mocks base method.
func (m *MockFrequencyLogInterface) IncrCount(ctx context.Context, cmd redis.Cmdable, lm *domain.LogMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrCount", ctx, cmd, lm)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrCount indicates an expected call of IncrCount.
func (mr *MockFrequencyLogInterfaceMockRecorder) IncrCount(ctx, cmd, lm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrCount", reflect.TypeOf((*MockFrequencyLogInterface)(nil).IncrCount), ctx, cmd, lm)
}

// SetUpdatedAt mocks base method.
func (m *MockFrequencyLogInterface) SetUpdatedAt(ctx context.Context, cmd redis.Cmdable, name string, level *domain.LogLevel, u *domain.FrequencyLogUpdatedAt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdatedAt", ctx, cmd, name, level, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpdatedAt indicates an expected call of SetUpdatedAt.
func (mr *MockFrequencyLogInterfaceMockRecorder) SetUpdatedAt(ctx, cmd, name, level, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatedAt", reflect.TypeOf((*MockFrequencyLogInterface)(nil).SetUpdatedAt), ctx, cmd, name, level, u)
}

// WatchUpdatedAt mocks base method.
func (m *MockFrequencyLogInterface) WatchUpdatedAt(ctx context.Context, client redis.UniversalClient, fn func(*redis.Tx) error, name string, level *domain.LogLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpdatedAt", ctx, client, fn, name, level)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchUpdatedAt indicates an expected call of WatchUpdatedAt.
func (mr *MockFrequencyLogInterfaceMockRecorder) WatchUpdatedAt(ctx, client, fn, name, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpdatedAt", reflect.TypeOf((*MockFrequencyLogInterface)(nil).WatchUpdatedAt), ctx, client, fn, name, level)
}
